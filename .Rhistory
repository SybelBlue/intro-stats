facet_wrap(~Affirmed)
senators_sub %>%
ggplot(aes(fill = Party, x = AutoCont)) +
geom_histogram(bins = 30) +
facet_wrap(~Affirmed)
senators_sub %>%
ggplot(aes(color = Party, y = AutoCont)) +
geom_boxplot() +
facet_wrap(~Affirmed)
senators_sub %>%
ggplot(aes(fill = Party, x = AutoCont)) +
geom_histogram(bins = 30) +
facet_wrap(~Affirmed)
senators_sub %>%
ggplot(aes(color = Affirmed, y = AutoCont)) +
geom_boxplot() +
facet_wrap(~Party)
senators_sub %>%
ggplot(aes(fill = Party, x = AutoCont)) +
geom_histogram(bins = 50)
senators_sub %>%
ggplot(aes(color = Party, y = AutoCont)) +
geom_boxplot()
vote_by_cont <- glm(Vote ~ AutoCont, senators_sub, family = "binomial")
summary(climb_model_1)$coefficients
vote_by_cont <- glm(Vote ~ AutoCont, senators_sub, family = "binomial")
summary(vote_by_cont)$coefficients
vote_by_cont <- glm(Vote ~ AutoCont + Party, senators_sub, family = "binomial")
summary(vote_by_cont)$coefficients
vote_by_cont <- glm(Vote ~ AutoCont/10000 + Party, senators_sub, family = "binomial")
vote_by_cont <- glm(Vote ~ AutoCont + Party, senators_sub, family = "binomial")
summary(vote_by_cont)$coefficients
ggplot(senators_sub, aes(x = AutoCont, y = Vote, color = Party)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE)
vote_by_cont <- glm(Vote ~ AutoCont * Party, senators_sub, family = "binomial")
summary(vote_by_cont)$coefficients
exp(-1.4)
exp(1000 * 0.0001079363)
exp(1.8810355949)
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for(0, 1)
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for(0, 0)
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
odds <- exp(log_odds)
return (odds / (odds + 1))
}
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
prob_error <- function(contribution, is_republican) {
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, PartyR = is_republican))
predicted_prob <- from_log_odds(predicted_log_odds)
abs
}
?abs
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
model_residual <- function(contribution, is_republican) {
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, PartyR = is_republican))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
prob_for(1000, 1)
prob_for(1000, 1)
model_residual(1000, 1)
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
model_residual <- function(contribution, is_republican) {
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, Party = is_republican))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
prob_for(1000, 1)
model_residual(1000, 1)
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
model_residual <- function(contribution, is_republican) {
party_sym <- if (is_republican) 1 else 0
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, Party = party_sym))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
prob_for(1000, 1)
model_residual(1000, 1)
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
model_residual <- function(contribution, is_republican) {
party_sym <- if (is_republican == 1) "R" else "D"
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, Party = party_sym))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
prob_for(1000, 1)
model_residual(1000, 1)
prob_for(1000, 0)
model_residual(1000, 0)
prob_for(20000, 1)
model_residual(20000, 1)
prob_for(20000, 0)
model_residual(20000, 0)
library(ggplot2)
library(dplyr)
library(magrittr)
cars <- read.csv("http://www.macalester.edu/~ajohns24/data/FordsSub.csv")
car_model_1 <- lm(Price ~ Mileage + Age, cars)
summary(car_model_1)$coefficients
car_model_2 <- lm(Price ~ Age * Mileage, cars)
summary(car_model_2)$coefficients
predict(car_model_2, newdata = data.frame(Age = 5, Mileage = 1e5))
senators <- read.csv("http://www.macalester.edu/~ajohns24/data/Senate.csv")
# Define a variable Affirmed that is TRUE only if voted YES
senators %<>% mutate(Affirmed = Vote == 1)
senators %>%
filter(Party == "D") %>%
count
senators %>%
filter(Affirmed) %>%
count
senators %>%
ggplot(aes(x = AutoCont)) +
geom_histogram(bins = 30)
senators %>%
ggplot(aes(fill = Affirmed, x = AutoCont)) +
geom_histogram(bins = 30)
senators %>%
ggplot(aes(color = Affirmed, y = AutoCont)) +
geom_boxplot()
senators %>%
arrange(-AutoCont) %>%
head(1) %>%
select(LastName, FirstName, State)
senators_sub <- senators %>%
filter(AutoCont != max(AutoCont))
# It appears there is an extra variable? dim = 99 x 7 not 99 x 6
dim(senators_sub)
# The mean is correct!
senators_sub %>%
summarize(mean(AutoCont))
senators_sub %>%
ggplot(aes(fill = Party, x = AutoCont)) +
geom_histogram(bins = 50)
senators_sub %>%
ggplot(aes(color = Party, y = AutoCont)) +
geom_boxplot()
senators_sub %>%
group_by(Party) %>%
summarise(mean(AutoCont))
cont_vs_party_model <- lm(AutoCont ~ Party, data = senators_sub)
summary(cont_vs_party_model)$coef
senators_sub %>%
ggplot(aes(fill = Party, x = AutoCont)) +
geom_histogram(bins = 30) +
facet_wrap(~Affirmed)
senators_sub %>%
ggplot(aes(color = Affirmed, y = AutoCont)) +
geom_boxplot() +
facet_wrap(~Party)
vote_by_cont <- glm(Vote ~ AutoCont + Party, senators_sub, family = "binomial")
summary(vote_by_cont)$coefficients
ggplot(senators_sub, aes(x = AutoCont, y = Vote, color = Party)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, fullrange = TRUE)
exp(1.8810355949)
# converts from log(odds(E)) to prob(E)
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
# gets the prob of affirmative vote given a contribution and affiliation
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
# calculates the residual of our manually calculated model vs `predict` on the constructed model
model_residual <- function(contribution, is_republican) {
party_sym <- if (is_republican == 1) "R" else "D"
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, Party = party_sym))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
# converts from log(odds(E)) to prob(E)
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
# gets the prob of affirmative vote given a contribution and affiliation
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
# calculates the residual of our manually calculated model vs `predict` on the constructed model
model_residual <- function(contribution, is_republican) {
party_sym <- if (is_republican == 1) "R" else "D"
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, Party = party_sym))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
# converts from log(odds(E)) to prob(E)
from_log_odds <- function(log_odds) {
odds <- exp(log_odds)
return (odds / (odds + 1))
}
# gets the prob of affirmative vote given a contribution and affiliation
prob_for <- function(contribution, is_republican) {
log_odds <- -1.4 + 0.0001 * contribution + 1.881 * is_republican
return (from_log_odds(log_odds))
}
# calculates the residual of our manually calculated model vs `predict` on the constructed model
model_residual <- function(contribution, is_republican) {
party_sym <- if (is_republican == 1) "R" else "D"
predicted_log_odds <- vote_by_cont %>%
predict(newdata = data.frame(AutoCont = contribution, Party = party_sym))
predicted_prob <- from_log_odds(predicted_log_odds)
guess <- prob_for(contribution, is_republican)
return (guess - predicted_prob)
}
prob_for(1000, 1)
model_residual(1000, 1)
prob_for(1000, 0)
model_residual(1000, 0)
prob_for(20000, 1)
model_residual(20000, 1)
prob_for(20000, 0)
model_residual(20000, 0)
setwd("~/Documents/GitHub/intro-stats")
install.packages("RCurl")
# Import the data
library(RCurl)
compas <- read.csv(text=getURL("https://raw.githubusercontent.com/propublica/compas-analysis/master/compas-scores-two-years.csv"), header=TRUE)
# Filter out unusable cases (inspired by ProPublica analysis)
compas <- compas %>%
select(age, c_charge_degree, c_charge_desc, race, sex, priors_count, two_year_recid, days_b_screening_arrest, is_recid, decile_score, score_text) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A') %>%
mutate(score_text = factor(score_text, levels = c("Low", "Medium", "High"))) %>%
select(-c(days_b_screening_arrest, is_recid))
library(dplyr)
# Import the data
library(RCurl)
compas <- read.csv(text=getURL("https://raw.githubusercontent.com/propublica/compas-analysis/master/compas-scores-two-years.csv"), header=TRUE)
# Filter out unusable cases (inspired by ProPublica analysis)
compas <- compas %>%
select(age, c_charge_degree, c_charge_desc, race, sex, priors_count, two_year_recid, days_b_screening_arrest, is_recid, decile_score, score_text) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A') %>%
mutate(score_text = factor(score_text, levels = c("Low", "Medium", "High"))) %>%
select(-c(days_b_screening_arrest, is_recid))
# And create some new variables (inspired by ProPublica)
compas <- compas %>%
mutate(c_charge_degree = factor(c_charge_degree)) %>%
mutate(race = factor(race)) %>%
within(race <- relevel(race, ref = 3)) %>%
mutate(sex = factor(sex, labels= c("Female","Male"))) %>%
within(sex <- relevel(sex, ref = 2)) %>%
mutate(score_factor = factor(score_text != "Low", labels = c("LowScore","HighScore")))
library(dplyr)
# Import the data
library(RCurl)
compas <- read.csv(text=getURL("https://raw.githubusercontent.com/propublica/compas-analysis/master/compas-scores-two-years.csv"), header=TRUE)
# Filter out unusable cases (inspired by ProPublica analysis)
compas <- compas %>%
select(age, c_charge_degree, c_charge_desc, race, sex, priors_count, two_year_recid, days_b_screening_arrest, is_recid, decile_score, score_text) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A') %>%
mutate(score_text = factor(score_text, levels = c("Low", "Medium", "High"))) %>%
select(-c(days_b_screening_arrest, is_recid))
# And create some new variables (inspired by ProPublica)
compas <- compas %>%
mutate(c_charge_degree = factor(c_charge_degree)) %>%
mutate(race = factor(race)) %>%
within(race <- relevel(race, ref = 3)) %>%
mutate(sex = factor(sex, labels= c("Female","Male"))) %>%
within(sex <- relevel(sex, ref = 2)) %>%
mutate(score_factor = factor(score_text != "Low", labels = c("LowScore","HighScore")))
# Import the data
raw_survey_data <- read.csv("https://www.macalester.edu/~ajohns24/data/pulse_of_the_nation.csv")
names(raw_survey_data) <- c("income", "gender", "age", "party", "trump_approval", "education", "marital", "robots", "climate_change", "transformers", "science_is_honest", "vaccines_are_safe", "books", "ghosts", "fed_sci_budget", "earth_sun", "wise_unwise")
raw_survey_data <- raw_survey_data %>%
mutate(climate_change_binary = (climate_change == "Real and Caused by People"))
# Import the data
raw_survey_data <- read.csv("https://www.macalester.edu/~ajohns24/data/pulse_of_the_nation.csv")
names(raw_survey_data) <- c("income", "gender", "age", "party", "trump_approval", "education", "marital", "robots", "climate_change", "transformers", "science_is_honest", "vaccines_are_safe", "books", "ghosts", "fed_sci_budget", "earth_sun", "wise_unwise")
raw_survey_data <- raw_survey_data %>%
mutate(climate_change_binary = (climate_change == "Real and Caused by People"))
library(dplyr)
library(magrittr)
# Import the data
library(RCurl)
compas <- read.csv(text=getURL("https://raw.githubusercontent.com/propublica/compas-analysis/master/compas-scores-two-years.csv"), header=TRUE)
# Filter out unusable cases (inspired by ProPublica analysis)
compas <- compas %>%
select(age, c_charge_degree, c_charge_desc, race, sex, priors_count, two_year_recid, days_b_screening_arrest, is_recid, decile_score, score_text) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A') %>%
mutate(score_text = factor(score_text, levels = c("Low", "Medium", "High"))) %>%
select(-c(days_b_screening_arrest, is_recid))
# And create some new variables (inspired by ProPublica)
compas <- compas %>%
mutate(c_charge_degree = factor(c_charge_degree)) %>%
mutate(race = factor(race)) %>%
within(race <- relevel(race, ref = 3)) %>%
mutate(sex = factor(sex, labels= c("Female","Male"))) %>%
within(sex <- relevel(sex, ref = 2)) %>%
mutate(score_factor = factor(score_text != "Low", labels = c("LowScore","HighScore")))
# Import the data
raw_survey_data <- read.csv("https://www.macalester.edu/~ajohns24/data/pulse_of_the_nation.csv")
names(raw_survey_data) <- c("income", "gender", "age", "party", "trump_approval", "education", "marital", "robots", "climate_change", "transformers", "science_is_honest", "vaccines_are_safe", "books", "ghosts", "fed_sci_budget", "earth_sun", "wise_unwise")
raw_survey_data %<>%
mutate(climate_change_binary = (climate_change == "Real and Caused by People"))
View(raw_survey_data)
View(compas)
hotels <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv")
hotels <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv")
install.packages("rattle")
View(hotels)
View(hotels)
?hotels
??hotels
data(weatherAUS)
library(rattle)
data(weatherAUS)
library(dplyr)
library(magrittr)
library(rattle)
data(weatherAUS)
data(weatherAUS)
weatherAUS %>%
head(5)
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow)
library(ggplot2)
library(dplyr)
library(magrittr)
library(rattle)
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow)
rainy_simple %>%
ggplot(aes(color = RainToday, y = factor(RainTomorrow, c("No", "Yes")))) +
geom_boxplot()
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow)
rainy_simple %>%
ggplot(aes(color = RainToday, y = RainTomorrow)) +
geom_histogram()
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow)
rainy_simple %>%
ggplot(aes(color = RainToday, y = RainTomorrow)) +
geom_histogram(stat = "count")
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow)
rainy_simple %>%
ggplot(aes(color = RainToday, x = RainTomorrow)) +
geom_histogram(stat = "count")
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow)
rainy_simple %>%
ggplot(aes(, x = RainTomorrow)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>% select(RainToday, RainTomorrow) %>% filter(RainToday != "NA", RainTomorrow != "NA")
rainy_simple %>%
ggplot(aes(, x = RainTomorrow)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
select(RainToday, RainTomorrow) %>%
filter(RainToday != "NA", RainTomorrow != "NA")
rainy_simple %>%
ggplot(aes(x = RainTomorrow)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
select(RainToday, RainTomorrow, Pressure3pm) %>%
filter(RainToday != "NA", RainTomorrow != "NA")
rainy_simple %>%
ggplot(aes(x = RainTomorrow)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
select(RainToday, RainTomorrow, Pressure3pm) %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA")
rainy_simple %>%
ggplot(aes(x = RainTomorrow)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
select(RainToday, RainTomorrow, Pressure3pm) %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA")
rainy_simple %>%
ggplot(aes(color = RainTomorrow, x = Pressure3pm)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA") %>%
select(RainToday, RainTomorrow, round(Pressure3pm))
rainy_simple <- weatherAUS %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA") %>%
select(RainToday, RainTomorrow, Pressure3pm)
rainy_simple %>%
ggplot(aes(color = RainTomorrow, x = Pressure3pm)) +
geom_histogram(stat = "count") +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA") %>%
select(RainToday, RainTomorrow, Pressure3pm)
rainy_simple %>%
ggplot(aes(color = RainTomorrow, x = Pressure3pm)) +
geom_histogram(stat = "count", binwidth = 5) +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA") %>%
select(RainToday, RainTomorrow, Pressure3pm)
rainy_simple %>%
ggplot(aes(color = RainTomorrow, x = Pressure3pm)) +
geom_histogram(stat = "count", binwidth = 10) +
facet_wrap(~RainToday)
rainy_simple <- weatherAUS %>%
filter(RainToday != "NA", RainTomorrow != "NA", Pressure3pm != "NA") %>%
select(RainToday, RainTomorrow, Pressure3pm)
rainy_simple %>%
ggplot(aes(color = RainTomorrow, x = Pressure3pm)) +
geom_histogram(stat = "count", bins=30) +
facet_wrap(~RainToday)
weatherAUS %>%
select(Location) %>%
unique
?sort
weatherAUS %>%
select(Location) %>%
unique %>%
sort
weatherAUS %>%
select(Location) %>%
unique
weatherAUS %>%
select(Location) %>%
unique
?group_by
weatherAUS %>%
group_by(Location)
weatherAUS %>%
select(Location) %>%
unique
weatherAUS %>%
select(Location) %>%
unique
weatherAUS %>%
ggplot(aes(x = Location)) +
geom_histogram(stat = "count")
